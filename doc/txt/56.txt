5 Parameter Selections
We have to determine the thresholds of the two factors which represent the features of ROP: the number of instructions in the gadget (G_size), the length of contiguous candidate gadget sequence (S_length).
The gadget size threshold (T0) affects the detection accuracy. Bigger threshold generally incurs higher false positive. To find T0, we used two well-know gadget search tools, ROPGadget [8] and Ropper [9], to measure the sizes of gadgets from many normal applications, which include 22 popular Linux tools (e.g., ls, grep, and find) under directory /bin and /usr/bin, and 3 large binaries (Apache web server httpd 2.4.20, mysql 5.6 and python 2.7). We collected 282341 gadgets totally, 125605 from ROPGadget and 156736 from Ropper. As shown in Fig. 5, the largest gadget size is 10 and nearly all gadgets size is less than 8. In the gadget set generated by Ropper, the largest size is 6. We also measured the ROP malicious code collected from the real world ROP attacks, and no gadget size is greater than 6. Based on the above results, we can safely choose 7 as the gadget size threshold (T0 ). If the length of an instruction sequence is not greater than 7, it will be treated as a candidate gadget by ROP-Hunt.

Fig. 5. The size of gadget measurement results

In ROP attack, the attacker chains a few gadgets together to complete an intended operation. To construct a system call operation, the attacker has to use at least 3 gadgets to place the correct parameters in the argument registers and jump to the system call entry. We believe an attacker can not do any meaningful attacks by just using 3 or less gadgets. So we set the T1 to 3, that is to say, ROP-Hunt checks whether there are more than 3 contiguous gadgets.

6 Delay Gadget
ROP-Hunt is effective under the assumption that usable gadgets are short allowing us to distinguish attacks from normal programs. However, smart attackers may be able to tolerate some of the side-effects in a long gadget and use it in the middle of the attack to evade the detection. Mehmet Kyaalp et al. [25] introduced delay gadget that was long enough to reset the gadget counter used by the signature detector. They made a call to a function that resulted in executing a larger number of instructions. By convention, when a function returns, many registers such as ebx, esi, edi, esp, and ebp are saved. That is to say, delay gadget can reduce side-effect greatly. 

The purpose of a delay gadget is to avoid detection by signature-based detectors. It neither executes any part of the attack code or corrupts the machine state needed by the attack. It is impossible to conduct ROP attack only by delay gadgets. So when the previous gadget ending with a call invokes a function and the gadgets is longer than the threshold T0, ROP-Hunt just ignores this gadget and does not reset the counter. But if the gadget size does not break the threshold T0, the counter is still added by one.